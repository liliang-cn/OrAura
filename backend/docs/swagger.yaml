basePath: /api/v1
definitions:
  models.APIResponse:
    properties:
      code:
        description: 错误码
        type: integer
      data:
        description: 数据
      errors:
        description: 字段错误列表
        items:
          $ref: '#/definitions/models.FieldError'
        type: array
      message:
        description: 消息
        type: string
    type: object
  models.APIToken:
    properties:
      created_at:
        type: string
      expires_at:
        description: 过期时间
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_used_at:
        type: string
      name:
        description: 令牌名称
        type: string
      permissions:
        allOf:
        - $ref: '#/definitions/models.APITokenPermissions'
        description: 令牌权限
      token_prefix:
        description: 令牌前缀（显示用）
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.APITokenInfo:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_used_at:
        type: string
      name:
        type: string
      permissions:
        $ref: '#/definitions/models.APITokenPermissions'
      token_prefix:
        type: string
    type: object
  models.APITokenPermissions:
    properties:
      ip_whitelist:
        description: IP白名单
        items:
          type: string
        type: array
      rate_limit:
        allOf:
        - $ref: '#/definitions/models.TokenRateLimit'
        description: 速率限制
      resources:
        description: 可访问资源
        items:
          type: string
        type: array
      restrictions:
        allOf:
        - $ref: '#/definitions/models.TokenRestrictions'
        description: 其他限制
      scopes:
        description: 权限范围
        items:
          type: string
        type: array
    type: object
  models.APITokenResponse:
    properties:
      token:
        description: 完整令牌，只在创建时返回
        type: string
      token_info:
        $ref: '#/definitions/models.APITokenInfo'
    type: object
  models.AdminStatsResponse:
    properties:
      active_users:
        type: integer
      admin_users:
        type: integer
      member_users:
        type: integer
      new_users_month:
        type: integer
      new_users_today:
        type: integer
      new_users_week:
        type: integer
      total_users:
        type: integer
    type: object
  models.AdminUserInfo:
    properties:
      created_at:
        type: string
      default_role:
        $ref: '#/definitions/models.UserRole'
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      last_login_at:
        type: string
      login_count:
        type: integer
      membership_expiry:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.RoleInfo'
        type: array
      status:
        $ref: '#/definitions/models.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.AssignRoleRequest:
    properties:
      expires_at:
        type: string
      role_id:
        type: string
      user_id:
        type: string
    required:
    - role_id
    - user_id
    type: object
  models.AvatarUploadResponse:
    properties:
      avatar_url:
        type: string
    type: object
  models.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      new_password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  models.CreateAPITokenRequest:
    properties:
      expires_at:
        type: string
      name:
        example: My API Token
        maxLength: 100
        type: string
      permissions:
        $ref: '#/definitions/models.APITokenPermissions'
    required:
    - name
    - permissions
    type: object
  models.DeleteAccountRequest:
    properties:
      confirmation:
        type: string
      password:
        type: string
    required:
    - confirmation
    - password
    type: object
  models.DeviceInfo:
    properties:
      app_version:
        description: 1.0.0
        type: string
      device_id:
        description: 设备唯一标识
        type: string
      device_model:
        description: iPhone 13, Pixel 6, etc
        type: string
      os_version:
        description: iOS 15.0, Android 12, etc
        type: string
      platform:
        description: ios, android, web
        type: string
    type: object
  models.FieldError:
    properties:
      field:
        description: 字段名
        type: string
      message:
        description: 错误信息
        type: string
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Location:
    properties:
      city:
        type: string
      country:
        type: string
      lat:
        type: number
      lon:
        type: number
      region:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.NotificationSettings:
    properties:
      email:
        type: boolean
      push:
        type: boolean
    type: object
  models.OAuthLoginRequest:
    properties:
      access_token:
        type: string
      id_token:
        type: string
      user_info:
        $ref: '#/definitions/models.OAuthUserInfo'
    required:
    - access_token
    type: object
  models.OAuthName:
    properties:
      firstName:
        type: string
      fullName:
        type: string
      lastName:
        type: string
    type: object
  models.OAuthUserInfo:
    properties:
      email:
        type: string
      name:
        $ref: '#/definitions/models.OAuthName'
    type: object
  models.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/models.Pagination'
    type: object
  models.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      timezone:
        maxLength: 50
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - timezone
    - username
    type: object
  models.ResendVerificationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        maxLength: 128
        minLength: 8
        type: string
      token:
        type: string
    required:
    - confirm_password
    - new_password
    - token
    type: object
  models.RoleInfo:
    properties:
      description:
        type: string
      display_name:
        type: string
      expires_at:
        type: string
      id:
        type: string
      level:
        type: integer
      name:
        $ref: '#/definitions/models.UserRole'
    type: object
  models.ServiceHealth:
    properties:
      checked_at:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  models.SystemHealthResponse:
    properties:
      services:
        additionalProperties:
          $ref: '#/definitions/models.ServiceHealth'
        type: object
      status:
        type: string
      timestamp:
        type: string
    type: object
  models.TokenRateLimit:
    properties:
      requests_per_day:
        type: integer
      requests_per_hour:
        type: integer
      requests_per_minute:
        type: integer
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      is_new_user:
        type: boolean
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.UserInfo'
    type: object
  models.TokenRestrictions:
    properties:
      allowed_methods:
        description: 允许的HTTP方法
        items:
          type: string
        type: array
      allowed_paths:
        description: 允许的路径模式
        items:
          type: string
        type: array
      read_only:
        description: 只读权限
        type: boolean
    type: object
  models.UpdateProfileRequest:
    properties:
      nickname:
        maxLength: 100
        type: string
      preferences:
        $ref: '#/definitions/models.UserPreferences'
      timezone:
        maxLength: 50
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  models.UpdateUserStatusRequest:
    properties:
      reason:
        maxLength: 255
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.UserStatus'
        enum:
        - active
        - suspended
        - deleted
    required:
    - status
    type: object
  models.UserInfo:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      current_role:
        $ref: '#/definitions/models.UserRole'
      default_role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        description: 新增角色相关字段
      email:
        type: string
      email_verified:
        type: boolean
      last_login_at:
        type: string
      login_count:
        type: integer
      membership_expiry:
        type: string
      nickname:
        type: string
      oauth_provider:
        type: string
      preferences:
        $ref: '#/definitions/models.UserPreferences'
      roles:
        items:
          $ref: '#/definitions/models.RoleInfo'
        type: array
      timezone:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  models.UserPreferences:
    properties:
      language:
        type: string
      notifications:
        $ref: '#/definitions/models.NotificationSettings'
      theme:
        type: string
    type: object
  models.UserRole:
    enum:
    - regular
    - member
    - admin
    - super_admin
    type: string
    x-enum-comments:
      UserRoleAdmin: 管理员
      UserRoleMember: 会员用户
      UserRoleRegular: 普通用户
      UserRoleSuperAdmin: 超级管理员
    x-enum-descriptions:
    - 普通用户
    - 会员用户
    - 管理员
    - 超级管理员
    x-enum-varnames:
    - UserRoleRegular
    - UserRoleMember
    - UserRoleAdmin
    - UserRoleSuperAdmin
  models.UserSession:
    properties:
      created_at:
        type: string
      device_info:
        $ref: '#/definitions/models.DeviceInfo'
      expires_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      is_active:
        type: boolean
      last_activity:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      updated_at:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  models.UserStatus:
    enum:
    - active
    - suspended
    - deleted
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusSuspended
    - UserStatusDeleted
  models.VerifyEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
host: localhost:8080
info:
  contact:
    email: support@oraura.app
    name: OrAura API Support
    url: https://oraura.app/support
  description: OrAura spiritual divination application backend service with user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://oraura.app/terms
  title: OrAura Backend API
  version: "1.0"
paths:
  /admin/logs/login:
    get:
      description: 管理员查看系统登录日志
      parameters:
      - in: query
        name: end_date
        type: string
      - in: query
        name: ip_address
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      - in: query
        name: sort_desc
        type: boolean
      - in: query
        name: start_date
        type: string
      - in: query
        name: success
        type: boolean
      - in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PaginatedResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取登录日志
      tags:
      - 管理员
  /admin/stats:
    get:
      description: 获取用户数量、活跃用户等统计信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminStatsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取管理员仪表板统计信息
      tags:
      - 管理员
  /admin/system/health:
    get:
      description: 检查系统各组件的健康状态
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.SystemHealthResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 系统健康检查
      tags:
      - 管理员
  /admin/users:
    get:
      description: 管理员查看所有用户列表，支持筛选和分页
      parameters:
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      - enum:
        - regular
        - member
        - admin
        - super_admin
        in: query
        name: role
        type: string
        x-enum-comments:
          UserRoleAdmin: 管理员
          UserRoleMember: 会员用户
          UserRoleRegular: 普通用户
          UserRoleSuperAdmin: 超级管理员
        x-enum-descriptions:
        - 普通用户
        - 会员用户
        - 管理员
        - 超级管理员
        x-enum-varnames:
        - UserRoleRegular
        - UserRoleMember
        - UserRoleAdmin
        - UserRoleSuperAdmin
      - in: query
        maxLength: 100
        name: search
        type: string
      - enum:
        - created_at
        - updated_at
        - login_count
        - last_login_at
        in: query
        name: sort_by
        type: string
      - in: query
        name: sort_desc
        type: boolean
      - enum:
        - active
        - suspended
        - deleted
        in: query
        name: status
        type: string
        x-enum-varnames:
        - UserStatusActive
        - UserStatusSuspended
        - UserStatusDeleted
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PaginatedResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取用户列表
      tags:
      - 管理员
  /admin/users/{user_id}:
    get:
      description: 管理员查看用户详细信息
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminUserInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取用户详情
      tags:
      - 管理员
  /admin/users/{user_id}/roles:
    post:
      consumes:
      - application/json
      description: 管理员为用户分配角色
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      - description: 角色分配请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 分配角色给用户
      tags:
      - 管理员
  /admin/users/{user_id}/roles/{role_id}:
    delete:
      description: 管理员撤销用户的角色
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      - description: 角色ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 撤销用户角色
      tags:
      - 管理员
  /admin/users/{user_id}/status:
    put:
      consumes:
      - application/json
      description: 管理员更新用户状态（激活/暂停/删除）
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      - description: 状态更新请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 更新用户状态
      tags:
      - 管理员
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: 发送密码重置邮件
      parameters:
      - description: 忘记密码请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 忘记密码
      tags:
      - 认证
  /auth/login:
    post:
      consumes:
      - application/json
      description: 用户邮箱密码登录
      parameters:
      - description: 登录信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 用户登录
      tags:
      - 认证
  /auth/logout:
    post:
      description: 注销用户会话，使令牌失效
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 用户注销
      tags:
      - 认证
  /auth/logout/all:
    post:
      description: 登出用户的所有会话
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 登出所有会话
      tags:
      - 认证
  /auth/oauth/apple:
    post:
      consumes:
      - application/json
      description: 使用 Apple 账户登录
      parameters:
      - description: Apple OAuth 登录请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OAuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Apple OAuth 登录
      tags:
      - OAuth
  /auth/oauth/google:
    post:
      consumes:
      - application/json
      description: 使用 Google 账户登录
      parameters:
      - description: Google OAuth 登录请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OAuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Google OAuth 登录
      tags:
      - OAuth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: 使用刷新令牌获取新的访问令牌
      parameters:
      - description: 刷新令牌请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 刷新访问令牌
      tags:
      - 认证
  /auth/register:
    post:
      consumes:
      - application/json
      description: 创建新用户账户
      parameters:
      - description: 注册信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 用户注册
      tags:
      - 认证
  /auth/resend-verification:
    post:
      consumes:
      - application/json
      description: 重新发送邮箱验证邮件
      parameters:
      - description: 重新发送验证邮件请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 重新发送验证邮件
      tags:
      - 认证
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: 使用重置令牌重置密码
      parameters:
      - description: 重置密码请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 重置密码
      tags:
      - 认证
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: 使用验证令牌验证用户邮箱
      parameters:
      - description: 验证邮箱请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: 验证邮箱
      tags:
      - 认证
  /user/api-tokens:
    get:
      description: 获取当前用户的所有API令牌
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.APIToken'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 列出API令牌
      tags:
      - API令牌
    post:
      consumes:
      - application/json
      description: 为当前用户创建新的API令牌
      parameters:
      - description: API令牌创建请求
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateAPITokenRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.APITokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 创建API令牌
      tags:
      - API令牌
  /user/api-tokens/{token_id}:
    delete:
      description: 删除指定的API令牌
      parameters:
      - description: 令牌ID
        in: path
        name: token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 删除API令牌
      tags:
      - API令牌
  /user/sessions:
    get:
      description: 获取当前用户的所有活跃会话
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserSession'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取用户会话
      tags:
      - 用户
  /user/sessions/{session_id}:
    delete:
      description: 删除指定的用户会话
      parameters:
      - description: 会话ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 删除用户会话
      tags:
      - 用户
  /users/account:
    delete:
      consumes:
      - application/json
      description: 永久删除用户账户及所有相关数据
      parameters:
      - description: 删除账户确认
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 删除账户
      tags:
      - 用户
  /users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: 上传用户头像图片
      parameters:
      - description: 头像文件
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AvatarUploadResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 上传头像
      tags:
      - 用户
  /users/password:
    put:
      consumes:
      - application/json
      description: 修改当前用户的密码
      parameters:
      - description: 修改密码信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 修改密码
      tags:
      - 用户
  /users/profile:
    get:
      description: 获取当前用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 获取用户信息
      tags:
      - 用户
    put:
      consumes:
      - application/json
      description: 更新当前用户的个人信息
      parameters:
      - description: 更新信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: 更新用户信息
      tags:
      - 用户
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
