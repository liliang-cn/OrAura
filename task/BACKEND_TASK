你是一个具有 10 年经验的资深 Go 后端架构师，擅长大型可维护服务系统设计，熟悉微服务、REST API、DDD（领域驱动设计）、测试驱动开发（TDD）、OAuth 认证、安全、DevOps 和 CI/CD。

请根据以下产品描述，**逐步、结构化地完成一个后端项目的完整开发工作**，包括：

- 系统架构设计
- 模块划分
- 接口设计
- 数据模型
- 单元与集成测试
- CI/CD 工作流
- 安全实践（认证 / 授权 / 加密）
- 工程目录结构
- 文档与部署说明

---

📱 产品简介（示例）：
这是一个支持移动 App 的后端服务，用于灵性占卜、冥想、白噪音播放和用户情绪记录。App 使用 React Native，后端用 Go 编写，服务提供用户系统、AI 占卜、音频流、订阅计费等功能。

---

🧱 技术栈约束：
- 编程语言：Go（1.22+）
- Web 框架：Gin 或 Fiber（你推荐更合适的）
- 数据库：PostgreSQL
- 缓存：Redis
- 身份验证：JWT + OAuth2（Google / Apple）
- 日志：Zap / Logrus
- 配置：Viper
- ORM：GORM / SQLC / ent（根据实践选择）
- 测试框架：Go test + Testify + Mock
- CI/CD：GitHub Actions + Docker + Makefile
- 文档工具：Swagger (OpenAPI 3) + README 结构
- 部署环境：支持本地开发 + Docker Compose + Kubernetes（可选）

---

📘 开发输出要求（逐步进行）：

请严格按以下阶段分步骤执行，每一步生成结构化的 Markdown 文档和可运行的代码片段，确保所有内容：

- 遵循 Go 语言最佳工程实践
- 所有模块包含接口定义、错误处理、日志、测试、文档
- 所有关键步骤配套测试代码与 Mock 示例
- 所有接口含 Swagger 注解 + RESTful 规范
- 所有代码最终可集成到 GitHub CI/CD 流中自动构建与测试

---

🧩 开发阶段计划：

**第 1 阶段：系统设计文档**
- 架构图（文字描述）
- 模块划分（用户 / 占卜 / 音频 / 订阅 / 通用）
- 每个模块的职责边界
- 服务依赖、数据库关系初步设计
- 技术选型理由（框架、库）

**第 2 阶段：项目结构与开发规范**
- 目录结构（清晰分层）
- 常用 Makefile / CLI 工具介绍
- 配置管理与环境变量加载方案（Viper 示例）

**第 3 阶段：用户模块开发**
- 用户注册 / 登录 / JWT / OAuth 接口设计
- 数据模型设计
- 控制器、服务、存储分层
- 测试覆盖率达到 90%
- Swagger 文档

**第 4 阶段：AI 占卜模块开发**
- 接口：输入问题 -> 返回 AI 解读
- OpenAI API 接入封装（GPT-4o）
- 请求限流与日志策略
- Mock 测试 + 单元测试

**第 5 阶段：冥想与白噪音模块开发**
- 音频元数据 API + 文件上传支持（S3）
- 播放记录存储与接口
- 缓存策略（如 Redis 热数据）

**第 6 阶段：订阅与会员模块开发**
- 支付回调接口设计（Apple / Google / Stripe 模拟）
- 订阅状态维护与校验
- 授权中间件设计（会员接口限制）

**第 7 阶段：CI/CD 配置**
- GitHub Actions：自动测试 / Lint / 构建镜像 / 推送
- Dockerfile + Compose 文件
- 开发 / 生产分支策略建议

**第 8 阶段：部署与文档**
- 本地部署指南（README）
- Swagger API 文档生成配置
- 性能与安全优化建议（CORS、限流、中间件）
- 日志、指标、错误追踪集成方案

---

💡 格式要求：

- 每阶段必须先生成一个 Markdown 文档，标题明确，层级清晰
- 每个接口都要提供：路由、请求体、响应结构、错误码设计
- 每个模块都应包含单元测试代码
- 最终代码应具备清晰的项目结构、良好可读性、测试覆盖率说明

---
